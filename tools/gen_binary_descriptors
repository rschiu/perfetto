#!/usr/bin/env python
# Copyright (C) 2018 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
import os
import re
import sys
import argparse
import tempfile
import subprocess
import hashlib
import textwrap

SCRIPT_PATH = 'tools/gen_binary_descriptors'

def hash_path(path):
  hash = hashlib.sha1()
  with open(path) as f:
    hash.update(f.read())
  return hash.hexdigest()

def generate(proto_path, source, target, protoc_path):
  _, source_name = os.path.split(source)
  _, target_name = os.path.split(target)
  assert source_name.replace('.proto', '.descriptor.h') == target_name

  with tempfile.NamedTemporaryFile() as fdescriptor:
    subprocess.check_call([
        protoc_path,
        '--proto_path=' + proto_path,
        '-o{}'.format(fdescriptor.name),
        source,
    ])

    s = fdescriptor.read()
    proto_name = source_name[:-len('.proto')].title().replace("_", "")
    constant_name = 'k' + proto_name + 'Descriptor'
    binary = '{' + ', '.join('{0:#04x}'.format(ord(c)) for c in s) + '}'
    binary = textwrap.fill(binary,
        width=80,
        initial_indent='    ',
        subsequent_indent='     ')
    include_guard = target.replace('/', '_').replace('.', '_').upper() + '_'

    with open(target, 'wb') as f:
      f.write("""
#ifndef {include_guard}
#define {include_guard}

#include <stddef.h>
#include <stdint.h>

#include <array>

// This file was autogenerated by tools/gen_binary_descriptors. Do not edit.

// SHA1({script_path})
// {script_hash}
// SHA1({source_path})
// {source_hash}

// This is the proto {proto_name} encoded as a ProtoFileDescriptor to allow
// for reflection without libprotobuf full/non-lite protos.

namespace perfetto {{

constexpr std::array<uint8_t, {size}> {constant_name}{{
{binary}}};

}}  // namespace perfetto

#endif  // {include_guard}
""".format(**{
        'proto_name': proto_name,
        'size': len(s),
        'constant_name': constant_name,
        'binary': binary,
        'include_guard': include_guard,
        'script_path': SCRIPT_PATH,
        'script_hash': hash_path(__file__),
        'source_path': source,
        'source_hash': hash_path(os.path.join(source)),
      }))


def main():
  parser = argparse.ArgumentParser()
  parser.add_argument('--protoc', required=True)
  parser.add_argument('--proto-path', required=True)
  parser.add_argument("source")
  parser.add_argument("target")
  args = parser.parse_args()

  try:
    assert os.path.exists(args.protoc), '{} does not exist'.format(args.protoc)
    generate(args.proto_path, args.source, args.target, args.protoc)
  except AssertionError as e:
    if not str(e):
      raise
    print('Error: {}'.format(e))
    return 1

if __name__ == '__main__':
  exit(main())
